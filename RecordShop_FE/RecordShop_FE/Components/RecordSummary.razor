@using RecordShop
@inject NavigationManager navigationManager

<td class="px-2 mx-2"><span>@Album.Artist</span></td>
<td class ="px-2 mx-2"><span>@Album.Title</span></td>
<td class="px-2 mx-2">
    @if (DeleteRequested)
    {
        <Button ButtonText="Confirm" T="int" Obj="Album.Id" OnClick="DeleteRecord" />
        <Button ButtonText="Cancel" T="int" Obj="Album.Id" OnClick="CancelDelete" />
    }
    else 
    {
        <Button ButtonText="🗑️" T="int" Obj="Album.Id" OnClick="RequestDelete" />
    }

    <Button ButtonText="🔧" T="Album" Obj="Album" OnClick="EditRecord" />
    <Button ButtonText="🔍" T="Album" Obj="Album" OnClick="ShowRecordPage" />
</td>
<td><span>
        @(StatusCode switch {
            200 => "🆗",
            204 => "✅",
            _ => "❌"
        }) (@StatusCode)
    </span>
</td>


@code {

    private bool DeleteRequested { get; set; }

    private HttpManager httpManager = new HttpManager();

    [Parameter] 
    public Album Album { get; set; }

    [Parameter] 
    public int StatusCode { get; set; }

    [Parameter] 
    public EventCallback<Album> OnEditRecord { get; set; }

    public void CancelDelete()
    {
        DeleteRequested = false;
    }

    public async Task DeleteRecord(int recordId)
    {
        var response = await httpManager.DeleteRecordById(recordId);
        StatusCode = (int)response.StatusCode;

        if (StatusCode == 204) {
            navigationManager.NavigateTo(navigationManager.BaseUri + $"records");
        }
    }

    public void EditRecord(Album album) {
        OnEditRecord.InvokeAsync(album);
    }

    private void RequestDelete() {
        DeleteRequested = true;
    }

    public void ShowRecordPage(Album album) {
        navigationManager.NavigateTo(navigationManager.BaseUri + $"records/{album.Id}");
    }
}
