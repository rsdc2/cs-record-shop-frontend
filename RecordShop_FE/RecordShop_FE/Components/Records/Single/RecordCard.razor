@using RecordShop
@using Microsoft.Extensions.Logging
@rendermode InteractiveServer
@namespace RecordShop.Components
@inject NavigationManager navigationManager

<tr>
    @if (EditMode) 
    {
        <td>
            <div>
                <RecordEditorForm Album="Album" OnUpdate="UpdateAlbum" />
            </div>
        </td>
    }
    else 
    {
        <RecordSummary 
        Album="Album" 
        StatusCode="StatusCode" 
        OnEditRecord="NavigateToEditForm"
        />
    }
</tr>

@code {
    private HttpManager httpUtils = new HttpManager();

    private RSNavContext navContext;

    private bool EditMode { get; set; } = false;

    [Parameter]
    public int StatusCode { get; set; } = 200;

    [Parameter] 
    public Album? Album { get; set; }

    [Parameter] 
    public EventCallback<Album> OnUpdateAlbum { get; set; }

    [Parameter]
    public Page PageContext { get; set; }

    protected override void OnInitialized() {
        navContext = new RSNavContext(navigationManager);
    }

    private async Task DeleteRecord(int id)
    {
        var response = await httpUtils.DeleteRecordById(id);
        StatusCode = (int)response.StatusCode;
    }

    private void ToggleFormVisible(bool editMode) => EditMode = !editMode;

    private void NavigateToEditForm(Album record) {
        EditMode = true;
    }

    private void UpdateAlbum(Album album) {
        ToggleFormVisible(EditMode);
        Album = album;
        StatusCode = (int)httpUtils.PutRecord(album).StatusCode;
        navContext.NavigateBack(PageContext, album);
    }
}
